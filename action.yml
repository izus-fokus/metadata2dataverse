# action.yml
name: 'Metadata To Dataverse'
description: 'Start MetadataMapper and make Request'
inputs:
  path:  # id of input
    description: 'path to codemeta-json-file in repo'
    required: true
    default: 'codemeta.json'
  dataverse-url:
    description: 'URL of the dataverse you want to save data to'
    required: false
    default: ""
  doi:
    description: 'doi of dataset'
    required: false
    default: ""
  api-key:
    description: 'API Key for Dataverse'
    required: false
    default: ""
outputs:
  metadata-mapper-result:
    description: 'result of the post request to metadata mapper'
    value: ${{ steps.mm-result.outputs.post-result }}
  post-result: # id of output
    description: 'result of the post request'
    value: ${{ steps.result.outputs.post-result }}
runs:
  using: 'composite'
  steps:
    - name: Checkout MetadataMapper-Repo, that contains Action
      uses: actions/checkout@v2
      with:
        repository: izus-fokus/metadata2dataverse
    - name: Start MetadataMapper
      run: | 
        docker build -t metadatamapper .
        docker run -e HOST_IP='0.0.0.0' -p 5000:5000/tcp metadatamapper &
      shell: bash
    - uses: actions/checkout@v2
    - name: Make Request to MetadataMapper
      id: mm-result
      run: |
        sudo apt-get update >/dev/null; sudo apt-get install -y curl >/dev/null
        response=$(curl --location --request POST http://localhost:5000/metadata/codemeta20?method=edit --header 'Content-Type:application/json' --data-binary '@${{ inputs.path }}')
        echo ::set-output name=post-result::$response
        printf "$response" > metadata.json
      shell: sh
    - name: Make Edit-Request to existing Dataverse-Dataset
      id: result
      working-directory: ./
      run: |
        if [ ${{ inputs.api-key }} != '' ] && [ ${{ inputs.doi }} != '' ] && [ ${{ inputs.dataverse-url }} != '' ]
        then
          cat metadata.json
          sudo apt-get update >/dev/null; sudo apt-get install -y curl >/dev/null
          response=$(curl -H 'X-Dataverse-key: ${{ inputs.api-key }}' -H 'Content-Type: application/json' -X PUT "${{ inputs.dataverse-url }}/api/datasets/:persistentId/editMetadata/?persistentId=doi:${{ inputs.doi }}&replace=true" --upload-file "metadata.json")
          echo $response
          echo "::set-output name=post-result::$response"
        else
          response="Update of dataset was not requested"
          echo "::set-output name=post-result::$response"
        fi
      shell: sh
